'use strict';

var htmlparser = require("htmlparser2");
var through = require('through2');
var gutil   = require('gulp-util');
var rext    = require('replace-ext');
var path    = require('path');
var fs      = require('fs');

var PluginError = gutil.PluginError;
var File = gutil.File;

var PLUGIN_NAME = 'gulp-prebem';
var configFile  = 'prebem.json';

//var tags = {},classes,bem = {},blocks = [],replaces;

module.exports = function (options) {

	var parser;

	return through.obj(function (file, enc, cb) {

		if (file.isStream()) {
			return cb(new PluginError(PLUGIN_NAME, 'Streaming not supported'));
		}
		if (file.isNull()) {
			return cb(null, file);
		}

		if (file.sourceMap) {
			options.sourcemap = true;
		}

		prebem.file     = file;
		prebem.fileName = path.basename(file.path);
		prebem.encoding = enc;
		prebem.html     = fs.readFileSync(file.path, {encoding: enc});

		var configfile = file.path.replace(prebem.fileName,configFile);
		    options    = extend(_DEFAULT_OPTIONS, options);

		if(fs.existsSync( configfile )) {
			var configfileContent = JSON.parse (fs.readFileSync(configfile, {encoding: enc}));
			options = extend(options, configfileContent);
		}


		parser = new htmlparser.Parser({

			onopentag : prebem.parseTag.bind(prebem),
			onclosetag: prebem.closedTag.bind(prebem)

		}, {decodeEntities: true});

		parser.write( prebem.html );

		var savePath = file.path.replace(prebem.fileName,'') + options.htmlPath;

		//fs.mkdir(savePath);
		fs.writeFileSync( savePath + prebem.fileName, prebem.html, enc);
		parser.end();

console.log(prebem.html);
		return cb();

	});

};





var Prebem = function(){

	this.tags = {};
	this.bem = {};
	this.blocks = [];

};

Prebem.prototype = {};
Prebem.prototype.parseTag = function(tagname, attribs){

	var classes = attribs.class ? attribs.class.split(' ') : [];
	var block_i = this.blocks.length ? (this.blocks.length - 1) : 0;
	var bem     = (this.blocks[block_i] && this.blocks[block_i].bem) || {};
	var element = this.getBem( classes, block_i);
		element.tag = tagname;
		element.tagIndex = (this.tags[tagname] = (this.tags[tagname] || 0))

	//console.log(element);
	this.replaceClass(element);

	//if( replaces.length ){
	//	replaceClasses(name, tags[name], classes, replaces);
	//}

	this.blocks.push(element);

	//console.log('classes',element.classes);
	this.tags[tagname]++;

};

Prebem.prototype.closedTag = function(tagname){
	this.blocks.pop();
};

Prebem.prototype.getBem = function ( classes, block_i ){

	var _class,prefix,back,block,
		parent     = this.blocks[block_i] || {bem:{}},
		element    = {
			bem : {},
			classes : []
		};


	for( var i = 0; classes.length > i; i++ ){

		if( !(_class = classes[i]) )
		{
			continue;
		}


		if ( prefix = isPrefix(_class) )
		{

			element.bem.block   = parent.bem.block   || false;
			element.bem.element = parent.bem.element || false;

			if( parent.bem.element )
			{
				element.bem.element += prefix;
			}
			else if( parent.bem.block )
			{
				element.bem.block += prefix;
			}

			element.classes.push(element.bem.block + (element.bem.element || ''));
			continue;
		}

		if( back = isBack(_class) )
		{

			if( block = this.blocks[block_i - back.i] ){

				var _element = this.getBem([back._class], (block_i - back.i));

				//console.log('_element',_element)

				if( _element.classes[0] ){
					element.classes.push( _element.classes[0] );
					element.bem.block   = _element.bem.block;
					element.bem.element = _element.bem.element||false;
				}

			}

			continue;
		}

		if( i == 0 && isBlock(_class) && !parent.bem.block )
		{
			element.bem.block = _class;
			element.classes.push(_class);
			continue;
		}
		else if( isElement(_class) )
		{
			element.bem.block   = parent.bem.block;
			element.bem.element = (parent.bem.element || '') + _class;

			element.classes.push(element.bem.block + element.bem.element);
			continue;
		}
		else if( isModifier(_class) )
		{
			element.classes.push(element.bem.block + element.bem.element + _class);
			continue;
		}
		else
		{
			element.classes.push(_class);
		}

	}

	return element;

};
Prebem.prototype.replaceClass = function(element){


	var regExtTag = new RegExp('((<'+ element.tag +')(.)+?>)','g');
	var i = 0;
	this.html = this.html.replace(regExtTag, function(str){

		if(i == element.tagIndex){
			str = str.replace(/class=('|")(.)+('|")/g,'class="'+element.classes.join(' ')+'"');
		}

		i++;
		return str;

	});
};



function isBlock(_class){
	return ( !isElement(_class) && !isModifier(_class) ) ? _class : false;
}

function isElement(_class){
	return ( _class.match(/^__/) ) ? _class : false;
}

function isPrefix(_class){
	return ( _class.match(/^-/) ) ? _class : false;
}

function isModifier(_class){
	return ( _class.match(/^_/) ) ? _class : false;
}

function isBack(_class){

	var i = 0;

	_class = _class.replace(/(\.\.\/)/g, function(){
		i++;
		return '';
	});

	return ((i==0) ? false : {
		i     : (i),
		_class: _class
	});
}


function extend(_default, _opions) {
	var result  = {},opt;
		_opions = _opions || {};

	for(opt in _default){
		result[opt] = _opions[opt]||_default[opt];
	}
	return result;
}

var _DEFAULT_OPTIONS = {
	styleFile : 'css',
	stylePath : '',
	htmlPath  : ''
};

var prebem = new Prebem();